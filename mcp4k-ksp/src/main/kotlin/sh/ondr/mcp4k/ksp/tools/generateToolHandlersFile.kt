package sh.ondr.mcp4k.ksp.tools

import com.google.devtools.ksp.processing.Dependencies
import sh.ondr.mcp4k.ksp.Mcp4kProcessor
import sh.ondr.mcp4k.ksp.ParamInfo

fun Mcp4kProcessor.generateToolHandlersFile() {
	val fileName = "Mcp4kGeneratedToolHandlers"
	val file = codeGenerator.createNewFile(
		dependencies = Dependencies(aggregating = true),
		packageName = mcp4kHandlersPackage,
		fileName = fileName,
	)

	val code = buildString {
		appendLine("// Generated by mcp4k")
		appendLine("package $mcp4kHandlersPackage")
		appendLine()
		appendLine("import kotlinx.serialization.json.JsonObject")
		appendLine("import kotlinx.serialization.json.decodeFromJsonElement")
		appendLine("import sh.ondr.mcp4k.runtime.core.mcpJson")
		appendLine("import sh.ondr.mcp4k.runtime.tools.McpToolHandler")
		appendLine("import sh.ondr.mcp4k.runtime.error.MissingRequiredArgumentException")
		appendLine("import sh.ondr.mcp4k.runtime.error.UnknownArgumentException")
		appendLine("import sh.ondr.mcp4k.runtime.Server")
		appendLine("import sh.ondr.mcp4k.schema.tools.CallToolResult")
		tools.forEach {
			appendLine("import ${it.fqName}")
		}
		appendLine()

		for (tool in tools) {
			val handlerClassName = tool.functionName.replaceFirstChar { it.uppercase() } + "McpToolHandler"
			val fqParamsClass = "$mcp4kParamsPackage.${tool.paramsClassName}"

			// Collect known parameter names
			val knownParams = tool.params.joinToString { "\"${it.name}\"" }

			// Collect strictly required parameters (no default, not nullable):
			val requiredParams = tool.params.filter { it.isRequired }

			appendLine("class $handlerClassName : McpToolHandler {")
			appendLine("  private val knownParams: Set<String> = setOf($knownParams)")
			appendLine()
			appendLine("  override suspend fun call(server: Server, params: JsonObject): CallToolResult {")
			appendLine("    val unknownKeys = params.keys - knownParams")
			appendLine("    if (unknownKeys.isNotEmpty()) {")
			appendLine(
				"      throw UnknownArgumentException(\"Unknown argument '\${unknownKeys.first()}' for tool '${tool.functionName}'\")",
			)
			appendLine("    }")
			appendLine()

			// Check for missing required parameters
			if (requiredParams.isNotEmpty()) {
				appendLine("    // Check required parameters")
				for (reqParam in requiredParams) {
					appendLine("    if (!params.containsKey(\"${reqParam.name}\")) {")
					appendLine("      throw MissingRequiredArgumentException(\"Missing required argument '${reqParam.name}'\")")
					appendLine("    }")
				}
				appendLine()
			}

			// Decode into param class (which might have nulls for optional fields)
			appendLine("    val obj = mcpJson.decodeFromJsonElement($fqParamsClass.serializer(), params)")
			appendLine()

			// Generate function call with optional-branching for default-having params
			appendLine("    val result =")
			appendLine(generateInvocationCode(tool, 3))
			appendLine("    return CallToolResult(listOf(result))")
			appendLine("  }")
			appendLine("}")
			appendLine()
		}
	}

	file.write(code.toByteArray())
	file.close()
}

private fun Mcp4kProcessor.generateInvocationCode(
	toolMeta: ToolMeta,
	indentLevel: Int = 2,
): String {
	// "branchingParams" are those that have a default => we might skip them if absent
	val branchingParams = toolMeta.params.filter { it.hasDefault }

	// "alwaysParams" are all others => we always pass them in the function call
	val alwaysParams = toolMeta.params.filter { !it.hasDefault }

	return generateToolOptionalChain(
		functionName = toolMeta.functionName,
		alwaysParams = alwaysParams,
		defaultParams = branchingParams,
		indentLevel = indentLevel,
		isServerExtension = toolMeta.isServerExtension,
	)
}

private fun Mcp4kProcessor.generateToolOptionalChain(
	functionName: String,
	alwaysParams: List<ParamInfo>,
	defaultParams: List<ParamInfo>,
	indentLevel: Int,
	isServerExtension: Boolean,
): String {
	// Base case: if no more default-having params, just call the function with [alwaysParams].
	if (defaultParams.isEmpty()) {
		return callToolFunction(
			functionName = functionName,
			alwaysParams = alwaysParams,
			optionalParams = emptyList(),
			indentLevel = indentLevel,
			isServerExtension = isServerExtension,
		)
	}
	val firstOpt = defaultParams.first()
	val remainingOpts = defaultParams.drop(1)
	val indent = " ".repeat(indentLevel * 2)

	return buildString {
		appendLine("${indent}if (params.containsKey(\"${firstOpt.name}\")) {")
		// If present, treat it like we must pass it
		val ifBranch = generateToolOptionalChain(
			functionName = functionName,
			alwaysParams = alwaysParams + firstOpt,
			defaultParams = remainingOpts,
			indentLevel = indentLevel + 1,
			isServerExtension = isServerExtension,
		)
		appendLine(ifBranch)
		appendLine("$indent} else {")
		// If absent, skip it so the function call uses its default
		val elseBranch = generateToolOptionalChain(
			functionName = functionName,
			alwaysParams = alwaysParams, // not adding firstOpt
			defaultParams = remainingOpts,
			indentLevel = indentLevel + 1,
			isServerExtension = isServerExtension,
		)
		appendLine(elseBranch)
		appendLine("$indent}")
	}
}

private fun Mcp4kProcessor.callToolFunction(
	functionName: String,
	alwaysParams: List<ParamInfo>,
	optionalParams: List<ParamInfo>,
	indentLevel: Int,
	isServerExtension: Boolean,
): String {
	val indent = " ".repeat(indentLevel * 2)
	val allParams = alwaysParams + optionalParams

	// Each parameter becomes "name = obj.name" (+ "!!" if it hasDefault && not nullable)
	val args = allParams.joinToString(",\n$indent  ") { param ->
		// If param.hasDefault && !param.isNullable => we do "!!" to guarantee non-null
		val maybeBang = if (param.hasDefault && !param.isNullable) "!!" else ""
		"${param.name} = obj.${param.name}$maybeBang"
	}

	val prefix = if (isServerExtension) "server." else ""

	return buildString {
		appendLine("$indent$prefix$functionName(")
		if (allParams.isNotEmpty()) {
			appendLine("$indent  $args")
		}
		append("$indent)")
	}
}
