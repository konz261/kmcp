package sh.ondr.kmcp.generated

import sh.ondr.kmcp.runtime.McpRegistry
import sh.ondr.kmcp.runtime.meta.ParameterMetadata
import sh.ondr.kmcp.runtime.meta.ToolMetadata
import sh.ondr.kmcp.runtime.tools.Tool
import sh.ondr.kmcp.runtime.tools.ToolHandler
import sh.ondr.kmcp.runtime.tools.ToolInputSchema
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.buildJsonObject

object GeneratedMcpRegistryInitializer {
	init {
		McpRegistry.globalTools["greet"] = Tool(
			name = "greet",
			description = "This tool greets the user.",
			inputSchema = ToolInputSchema(
				type = "object",
				properties = mapOf(
					"name" to buildJsonObject {
						put("type", JsonPrimitive("string"))
						put("description", JsonPrimitive("The name of the user"))
					},
					"age" to buildJsonObject {
						put("type", JsonPrimitive("number"))
					},
					"location" to buildJsonObject {
						put("type", JsonPrimitive("string"))
					}),
				required = listOf("name", "age")
			)
		)

		McpRegistry.globalToolHandlers["greet"] = object : ToolHandler {
			override fun invoke(arguments: Map<String, Any?>): Any? {
				val nameArg = arguments["name"]
				if (nameArg == null) error("Missing parameter name")
				val typedName = (nameArg as? String ?: error("name must be String"))
				val ageArg = arguments["age"]
				if (ageArg == null) error("Missing parameter age")
				val typedAge = ((ageArg as? Number)?.toInt() ?: error("age must be a 32-Bit Integer"))
				val locationArg = arguments["location"]
				val typedLocation = if (locationArg != null) (locationArg as? String ?: error("location must be String")) else null
				if (typedLocation != null) {
					return test.greet(name = typedName, age = typedAge, location = typedLocation)
				} else {
					return test.greet(name = typedName, age = typedAge)
				}
			}
		}

	}
}
